// Import shared config
importScripts('shared/config.js');

// üîÑ AUTO-RELOAD FOR DEVELOPMENT (Remove in production)
const DEV_MODE = true;

if (DEV_MODE) {
  let ws;
  
  function connectReloader() {
    ws = new WebSocket('ws://localhost:8080');
    
    ws.onopen = () => {
      console.log('üîÑ Auto-reload connected');
    };
    
    ws.onmessage = (event) => {
      if (event.data === 'reload') {
        console.log('üîÑ Reloading extension...');
        chrome.runtime.reload();
      }
    };
    
    ws.onerror = () => {
      console.log('‚ö†Ô∏è Auto-reload not available (run: npm run watch)');
    };
    
    ws.onclose = () => {
      setTimeout(connectReloader, 2000);
    };
  }
  
  connectReloader();
}

// –ë–µ–∑–ø–µ—á–Ω–∏–π background script –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ
console.log('Safe Background Script Loaded with functionality');

// –ü—Ä–æ—Å—Ç–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    console.log('Message received:', request);
    
    if (request.action === 'ping') {
        sendResponse({status: 'safe', message: 'Extension is running safely'});
    } else if (request.action === 'updateSettings') {
        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –±–µ–∑ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–∏—Ö
        chrome.storage.sync.set(request.settings, () => {
            console.log('Settings updated safely');
            sendResponse({status: 'success'});
        });
    } else if (request.action === 'toggleExtension') {
        // –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
        chrome.storage.sync.set({extensionEnabled: request.enabled}, () => {
            console.log('Extension toggled:', request.enabled);
            sendResponse({status: 'success'});
        });
    }
    
    return true;
});

// –ü—Ä–æ—Å—Ç–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è
chrome.runtime.onInstalled.addListener(() => {
    console.log('Safe extension installed');
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    chrome.storage.sync.set(DEFAULT_SETTINGS, () => {
        console.log('Default settings saved');
    });
});

// –û–±—Ä–æ–±–Ω–∏–∫ –∑–º—ñ–Ω –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
chrome.storage.onChanged.addListener((changes, namespace) => {
    if (namespace === 'sync') {
        console.log('Settings changed:', changes);
        
        // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —ó—Ö –¥–æ –≤—Å—ñ—Ö –≤–∫–ª–∞–¥–æ–∫
        chrome.storage.sync.get(DEFAULT_SETTINGS, (fullSettings) => {
            // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≤—Å—ñ–º –≤–∫–ª–∞–¥–∫–∞–º
            chrome.tabs.query({}, (tabs) => {
                for (let tab of tabs) {
                    chrome.tabs.sendMessage(tab.id, {
                        action: 'updateSettings',
                        settings: fullSettings
                    }).catch(() => {
                        // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫ –±–µ–∑ content script
                    });
                }
            });
        });
    }
});